{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","offset","setOffset","setNewItemLoading","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","items","map","comics","idx","tabIndex","to","id","src","thumbnail","alt","title","price","renderItems","onClick","disabled","style","display","ComicsPage","Helmet","name","content","AppBanner"],"mappings":"yJAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,2IIIxFC,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,cAACG,EAAA,EAAD,IAEX,IAAK,UACD,OAAOD,EAAiB,cAACD,EAAD,IAAgB,cAACE,EAAA,EAAD,IAE5C,IAAK,YACD,OAAO,cAACF,EAAD,IAEX,IAAK,QACD,OAAO,cAACG,EAAA,EAAD,IAEX,QACI,MAAM,IAAIC,MAAM,8BAuEbC,EAnEI,WACf,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4CJ,oBAAS,GAArD,mBAAOL,EAAP,KAAuBU,EAAvB,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEA,EAA4CC,cAArCC,EAAP,EAAOA,aAAchB,EAArB,EAAqBA,QAASiB,EAA9B,EAA8BA,WAC9BC,qBAAU,WACNC,EAAUT,GAAQ,KAEnB,IAEH,IAAMS,EAAY,SAACT,EAAQU,GACbR,GAAVQ,GACAJ,EAAaN,GACRW,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,iBAGzBK,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAGZf,EAAc,GAAD,mBAAKD,GAAL,YAAoBe,KACjCZ,GAAU,SAAAD,GAAM,OAAIA,EAAS,KAC7BE,GAAkB,GAClBE,EAAeU,IAyBnB,OACI,sBAAKE,UAAU,eAAf,UACK3B,EAAWC,GAAS,kBAxB7B,SAAqBQ,GACjB,IAAMmB,EAAQnB,EAAWoB,KAAI,SAACC,EAAQC,GAClC,OACI,oBACIC,SAAU,EAEVL,UAAU,eAHd,SAII,eAAC,IAAD,CAAMM,GAAE,kBAAaH,EAAOI,IAA5B,UACI,qBAAKC,IAAKL,EAAOM,UAAWC,IAAKP,EAAOQ,MAAOX,UAAU,qBACzD,qBAAKA,UAAU,oBAAf,SAAoCG,EAAOQ,QAC3C,qBAAKX,UAAU,qBAAf,SAAqCG,EAAOS,YAL3CR,MAUjB,OACI,oBAAIJ,UAAU,eAAd,SACKC,IAOsBY,CAAY/B,KAAaN,GACpD,wBACIsC,QAAS,kBAAMrB,EAAUT,IACzB+B,SAAUvC,EACVwC,MAAO,CAACC,QAAS9B,EAAc,OAAS,SACxCa,UAAU,mCAJd,SAKI,qBAAKA,UAAU,QAAf,6B,QCnEDkB,UAjBI,WACf,OACI,qCACI,eAACC,EAAA,EAAD,WACI,sBACIC,KAAK,cACLC,QAAQ,iCAEZ,mDAGJ,cAACC,EAAA,EAAD,IACA,cAAC,EAAD","file":"static/js/7.90d542c4.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n    \n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n\n        case 'confirmed':\n            return <Component />;\n\n        case 'error':\n            return <ErrorMessage />;\n\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n    \n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setOffset(offset => offset + 8);\n        setNewItemLoading(false);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(comicsList) {\n        const items = comicsList.map((comics, idx) => {\n            return (\n                <li \n                    tabIndex={0}\n                    key={idx}\n                    className=\"comics__item\">\n                    <Link to={`/comics/${comics.id}`}>\n                        <img src={comics.thumbnail} alt={comics.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{comics.title}</div>\n                        <div className=\"comics__item-price\">{comics.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                onClick={() => onRequest(offset)}\n                disabled={newItemLoading}\n                style={{display: comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics Page</title>\n\n            </Helmet>\n            <AppBanner />\n            <ComicsList />\n        </>\n    )\n}\n\nexport default ComicsPage;"],"sourceRoot":""}