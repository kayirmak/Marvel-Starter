{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacters","id","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_transformComics","getComic","title","pageCount","language","textObjects","price","prices","Skeleton","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","idx","current","forEach","ref","classList","remove","add","focus","elements","useMemo","arr","item","CSSTransition","timeout","classNames","tabIndex","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","i","CharInfo","charId","CharSearchForm","errorMessage","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","error","errorInfo","this","setState","children","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.3b3576ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img \n            src={img}\n            style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} \n            alt='Error'\n        />\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=b0ab8c4b218172b96ffbc0f4b17c770a';\n    const _baseOffset = 210;\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacters = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'No data for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || 'en-us',\n            price: comics.prices[0].price !== 0 ?  comics.prices[0].price + '$' : 'Not available'\n        }\n    } \n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacters,\n        getAllComics,\n        getComic,\n        getCharacterByName\n    }\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n\n            const data = await response.json();\n\n            return data;\n\n        } catch (e) {\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n    \n        case 'loading':\n            return <Spinner />;\n\n        case 'confirmed':\n            return <Component data={data} />;\n\n        case 'error':\n            return <ErrorMessage />;\n\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    \n    const {getCharacters, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [])\n    \n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacters(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    className=\"button button__main\"\n                    onClick={updateChar}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n    \n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n\n        case 'confirmed':\n            return <Component />;\n\n        case 'error':\n            return <ErrorMessage />;\n\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n        \n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (idx) => {\n        itemRefs.current.forEach(ref => ref.classList.remove('char__item_selected'));\n        itemRefs.current[idx].classList.add('char__item_selected');\n        itemRefs.current[idx].focus();\n    }\n    \n    function renderItems(arr) {\n        const items =  arr.map((item, idx) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition\n                    key={item.id}\n                    timeout={500}\n                    classNames=\"char__item\"\n                >\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[idx] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(idx);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(idx);\n                            }\n                        }}\n                    >\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n    \n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}\n                style={{display: charEnded ? 'none' : 'block'}}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = ({charId}) => {\n\n    const [char, setChar] = useState(null);\n    \n    const {getCharacters, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        // eslint-disable-next-line\n        updateChar();\n        // eslint-disable-next-line\n    }, [charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        if (!charId) return;\n\n        clearError();\n        getCharacters(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'unset'};  \n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    comics.length ? comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i >= 10) return;\n                        return (\n                            <li className=\"char__comics-item\" key={i}>\n                                {item.name}\n                            </li>\n                        )\n                    }) \n                    :\n                    'There is no comics'\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charSearchForm.scss\";\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n\n    const {clearError, getCharacterByName, process, setProcess} = useMarvelService();\n\n    const updateChar = async(name) => {\n        clearError();\n        const res = await getCharacterByName(name);\n        setChar(res);\n        await setProcess('confirmed');\n    }\n\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n  return (\n    <div className=\"char__search-form\">\n        <Formik\n            initialValues = {{\n                charName: ''\n            }}\n            validationSchema = {Yup.object({\n                charName: Yup.string().required('This field is required')\n            })}\n            onSubmit = { ({charName}) => {\n                updateChar(charName)\n            }}\n        >\n            <Form>\n                <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                <div className=\"char__search-wrapper\">\n                    <Field \n                        id=\"charName\" \n                        name='charName' \n                        type='text' \n                        placeholder=\"Enter name\"/>\n                    <button \n                        type='submit' \n                        className=\"button button__main\"\n                        disabled={process === 'loading'}\n                        >\n                        <div className=\"inner\">find</div>\n                    </button>\n                </div>\n                <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n            </Form>\n        </Formik>\n        {results}\n        {errorMessage}\n    </div>\n  )\n}\n\n\nexport default CharSearchForm;\n","import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({error: true})\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport decoration from '../../resources/img/vision.png';\n\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n       setChar(id)\n    }\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}